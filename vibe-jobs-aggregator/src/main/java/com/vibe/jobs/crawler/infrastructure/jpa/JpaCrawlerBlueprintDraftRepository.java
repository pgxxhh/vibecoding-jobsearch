package com.vibe.jobs.crawler.infrastructure.jpa;

import com.vibe.jobs.crawler.domain.CrawlerBlueprintDraft;
import com.vibe.jobs.crawler.domain.CrawlerBlueprintDraftRepository;
import com.vibe.jobs.crawler.domain.CrawlerBlueprintStatus;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.List;
import java.util.Optional;

@Repository
public class JpaCrawlerBlueprintDraftRepository implements CrawlerBlueprintDraftRepository {

    private final SpringDataCrawlerBlueprintJpaRepository repository;

    public JpaCrawlerBlueprintDraftRepository(SpringDataCrawlerBlueprintJpaRepository repository) {
        this.repository = repository;
    }

    @Override
    @Transactional
    public CrawlerBlueprintDraft save(CrawlerBlueprintDraft draft) {
        CrawlerBlueprintEntity entity = repository.findById(draft.code())
                .orElseGet(CrawlerBlueprintEntity::new);
        entity.setCode(draft.code());
        entity.setName(draft.name().isBlank() ? draft.code() : draft.name());
        entity.setEnabled(draft.enabled());
        entity.setEntryUrl(draft.entryUrl());
        entity.setConcurrencyLimit(draft.concurrencyLimit());
        entity.setConfigJson(draft.configJson());
        entity.setDraftConfigJson(draft.draftConfigJson());
        entity.setLastTestReport(draft.lastTestReportJson());
        entity.setStatus(draft.status().name());
        entity.setAutoGenerated(draft.autoGenerated());
        entity.setGeneratedBy(draft.generatedBy());
        entity.setGeneratedAt(draft.generatedAt().orElse(null));
        entity.setParserTemplateCode(draft.parserTemplateCode().isBlank() ? null : draft.parserTemplateCode());
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(Instant.now());
        }
        entity.setUpdatedAt(Instant.now());
        return map(repository.save(entity));
    }

    @Override
    public Optional<CrawlerBlueprintDraft> findByCode(String code) {
        return repository.findById(code == null ? "" : code.trim())
                .map(this::map);
    }

    @Override
    public List<CrawlerBlueprintDraft> findByStatus(List<CrawlerBlueprintStatus> statuses, int page, int size) {
        if (statuses == null || statuses.isEmpty()) {
            return List.of();
        }
        List<String> names = statuses.stream().map(Enum::name).toList();
        return repository.findByStatusInOrderByUpdatedAtDesc(names, PageRequest.of(Math.max(0, page), Math.max(1, size))).stream()
                .map(this::map)
                .toList();
    }

    @Override
    public List<CrawlerBlueprintDraft> findRecent(int page, int size) {
        return repository.findAllByOrderByUpdatedAtDesc(PageRequest.of(Math.max(0, page), Math.max(1, size))).stream()
                .map(this::map)
                .toList();
    }

    private CrawlerBlueprintDraft map(CrawlerBlueprintEntity entity) {
        if (entity == null) {
            return null;
        }
        return new CrawlerBlueprintDraft(
                entity.getCode(),
                entity.getName(),
                entity.getEntryUrl(),
                entity.getConcurrencyLimit(),
                entity.isEnabled(),
                entity.getParserTemplateCode(),
                entity.getConfigJson(),
                entity.getDraftConfigJson(),
                entity.getLastTestReport(),
                CrawlerBlueprintStatus.from(entity.getStatus()),
                entity.isAutoGenerated(),
                entity.getGeneratedBy(),
                entity.getGeneratedAt(),
                entity.getCreatedAt(),
                entity.getUpdatedAt()
        );
    }
}
