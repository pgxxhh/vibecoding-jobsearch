package com.vibe.jobs.crawler.application;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vibe.jobs.crawler.domain.AutomationSettings;
import com.vibe.jobs.crawler.domain.CrawlBlueprint;
import com.vibe.jobs.crawler.domain.CrawlBlueprint.RateLimit;
import com.vibe.jobs.crawler.domain.CrawlFlow;
import com.vibe.jobs.crawler.domain.CrawlerBlueprintDraft;
import com.vibe.jobs.crawler.domain.CrawlerBlueprintDraftRepository;
import com.vibe.jobs.crawler.domain.CrawlerBlueprintStatus;
import com.vibe.jobs.crawler.domain.PagingStrategy;
import com.vibe.jobs.crawler.domain.ParserProfile;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.util.Map;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

class CrawlerBlueprintAutoConfiguratorTest {

    private final CrawlerBlueprintDraftRepository draftRepository = mock(CrawlerBlueprintDraftRepository.class);
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final CrawlerBlueprintAutoConfigurator configurator = new CrawlerBlueprintAutoConfigurator(draftRepository, objectMapper);

    @Test
    void promotesBlueprintToBrowserWhenForbidden() throws Exception {
        CrawlBlueprint blueprint = new CrawlBlueprint(
                "foo",
                "Foo",
                true,
                1,
                "https://example.com",
                PagingStrategy.disabled(),
                CrawlFlow.empty(),
                ParserProfile.empty(),
                RateLimit.unlimited(),
                Map.of(),
                AutomationSettings.disabled(),
                CrawlerBlueprintStatus.ACTIVE,
                "{\"parser\":{\"listSelector\":\".card\",\"fields\":{\"title\":{\"type\":\"TEXT\",\"selector\":\"a\"}}}}",
                "",
                false,
                "",
                Instant.now()
        );

        String configJson = "{" +
                "\"parser\":{\"listSelector\":\".card\",\"fields\":{\"title\":{\"type\":\"TEXT\",\"selector\":\"a\"}}}}";
        CrawlerBlueprintDraft draft = new CrawlerBlueprintDraft(
                "foo",
                "Foo",
                "https://example.com",
                1,
                true,
                "",
                configJson,
                configJson,
                "",
                CrawlerBlueprintStatus.ACTIVE,
                false,
                "",
                null,
                Instant.now(),
                Instant.now()
        );

        when(draftRepository.findByCode("foo")).thenReturn(Optional.of(draft));
        when(draftRepository.save(any())).thenAnswer(invocation -> invocation.getArgument(0));

        WebClientResponseException forbidden = WebClientResponseException.create(
                HttpStatus.FORBIDDEN.value(),
                "Forbidden",
                HttpHeaders.EMPTY,
                new byte[0],
                StandardCharsets.UTF_8
        );

        configurator.handleHttpFailure(blueprint, forbidden);

        ArgumentCaptor<CrawlerBlueprintDraft> captor = ArgumentCaptor.forClass(CrawlerBlueprintDraft.class);
        verify(draftRepository).save(captor.capture());

        CrawlerBlueprintDraft saved = captor.getValue();
        assertThat(saved.autoGenerated()).isTrue();
        JsonNode updated = objectMapper.readTree(saved.configJson());
        assertThat(updated.path("automation").path("jsEnabled").asBoolean()).isTrue();
        assertThat(updated.path("metadata").path("autoBrowser").asBoolean()).isTrue();
        assertThat(updated.path("metadata").path("autoBrowserReason").asText()).isEqualTo("HTTP_FORBIDDEN");
    }

    @Test
    void skipsPromotionWhenBlueprintAlreadyRequiresBrowser() {
        AutomationSettings automation = new AutomationSettings(true, true, "", 0, AutomationSettings.SearchSettings.disabled());
        CrawlBlueprint blueprint = new CrawlBlueprint(
                "bar",
                "Bar",
                true,
                1,
                "https://example.com",
                PagingStrategy.disabled(),
                CrawlFlow.empty(),
                ParserProfile.empty(),
                RateLimit.unlimited(),
                Map.of(),
                automation,
                CrawlerBlueprintStatus.ACTIVE,
                "",
                "",
                true,
                "",
                Instant.now()
        );

        configurator.handleHttpFailure(blueprint, WebClientResponseException.create(
                HttpStatus.FORBIDDEN.value(),
                "Forbidden",
                HttpHeaders.EMPTY,
                new byte[0],
                StandardCharsets.UTF_8
        ));

        verify(draftRepository, never()).findByCode(any());
        verify(draftRepository, never()).save(any());
    }

    @Test
    void promotesBlueprintToBrowserWhenTimeoutOccurs() throws Exception {
        CrawlBlueprint blueprint = new CrawlBlueprint(
                "timeout",
                "Timeout",
                true,
                1,
                "https://example.com",
                PagingStrategy.disabled(),
                CrawlFlow.empty(),
                ParserProfile.empty(),
                RateLimit.unlimited(),
                Map.of(),
                AutomationSettings.disabled(),
                CrawlerBlueprintStatus.ACTIVE,
                "{\"parser\":{\"listSelector\":\".card\",\"fields\":{\"title\":{\"type\":\"TEXT\",\"selector\":\"a\"}}}}",
                "",
                false,
                "",
                Instant.now()
        );

        String configJson = "{" +
                "\"parser\":{\"listSelector\":\".card\",\"fields\":{\"title\":{\"type\":\"TEXT\",\"selector\":\"a\"}}}}";
        CrawlerBlueprintDraft draft = new CrawlerBlueprintDraft(
                "timeout",
                "Timeout",
                "https://example.com",
                1,
                true,
                "",
                configJson,
                configJson,
                "",
                CrawlerBlueprintStatus.ACTIVE,
                false,
                "",
                null,
                Instant.now(),
                Instant.now()
        );

        when(draftRepository.findByCode("timeout")).thenReturn(Optional.of(draft));
        when(draftRepository.save(any())).thenAnswer(invocation -> invocation.getArgument(0));

        IllegalStateException timeout = new IllegalStateException("Timeout on blocking read", new java.util.concurrent.TimeoutException());
        configurator.handleHttpFailure(blueprint, timeout);

        ArgumentCaptor<CrawlerBlueprintDraft> captor = ArgumentCaptor.forClass(CrawlerBlueprintDraft.class);
        verify(draftRepository).save(captor.capture());

        JsonNode updated = objectMapper.readTree(captor.getValue().configJson());
        assertThat(updated.path("metadata").path("autoBrowserReason").asText()).isEqualTo("HTTP_TIMEOUT");
    }
}
