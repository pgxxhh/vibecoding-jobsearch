#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
H2_DB_PATH=${H2_DB_PATH:-"$ROOT_DIR/data/jobsdb"}
H2_USER=${H2_USER:-sa}
OUTPUT_DIR=${OUTPUT_DIR:-"$ROOT_DIR/scripts"}
RAW_SCHEMA=${RAW_SCHEMA:-"$OUTPUT_DIR/h2-schema-raw.sql"}
SCHEMA_SQL=${SCHEMA_SQL:-"$OUTPUT_DIR/h2-schema-mysql.sql"}

if command -v java >/dev/null 2>&1; then
  :
else
  echo "java command not found. Install a JDK (17+) before running this script." >&2
  exit 1
fi

if ! command -v python3 >/dev/null 2>&1; then
  echo "python3 command not found. Install Python 3 before running this script." >&2
  exit 1
fi

if [[ -n "${H2_JAR:-}" ]]; then
  CANDIDATE_JAR="$H2_JAR"
else
  CANDIDATE_JAR=$(python3 - <<'PY'
import os
from pathlib import Path

repo = Path.home() / ".m2" / "repository" / "com" / "h2database" / "h2"
candidates = []
if repo.exists():
    for version_dir in repo.iterdir():
        jar = version_dir / f"h2-{version_dir.name}.jar"
        if jar.exists():
            candidates.append((jar.stat().st_mtime, jar))

if candidates:
    candidates.sort()
    print(candidates[-1][1])
PY
)
  if [[ -z "${CANDIDATE_JAR:-}" ]]; then
    echo "Unable to locate h2-*.jar in Maven repository. Run 'mvn dependency:copy-dependencies' or set H2_JAR manually." >&2
    exit 1
  fi
fi

if [[ ! -f "$CANDIDATE_JAR" ]]; then
  echo "H2 jar '$CANDIDATE_JAR' not found. Set H2_JAR env var to a valid path." >&2
  exit 1
fi

mkdir -p "$OUTPUT_DIR"

java -cp "$CANDIDATE_JAR" org.h2.tools.Script \
  -url "jdbc:h2:file:$H2_DB_PATH" \
  -user "$H2_USER" \
  -script "$RAW_SCHEMA"

RAW_SCHEMA="$RAW_SCHEMA" SCHEMA_SQL="$SCHEMA_SQL" python3 - <<'PY'
import os
import re

raw_path = os.environ["RAW_SCHEMA"]
schema_path = os.environ["SCHEMA_SQL"]

replacements = [
    (re.compile(r"PUBLIC\\."), ""),
    (re.compile(r"\""), ""),
    (re.compile(r"(?i) generated by default as identity"), " AUTO_INCREMENT"),
    (re.compile(r"(?i) identity"), " AUTO_INCREMENT"),
    (re.compile(r"(?i)boolean"), "TINYINT(1)"),
    (re.compile(r"(?i) bit\\(1\\)"), "TINYINT(1)"),
    (re.compile(r"(?i) timestamp\\(\d+\\)"), "DATETIME"),
]

allowed_prefixes = (
    "CREATE TABLE",
    "ALTER TABLE",
    "CREATE INDEX",
    "DROP INDEX",
    "DROP TABLE",
    "COMMENT ON",
)

out_lines = []
with open(raw_path, "r", encoding="utf-8") as src:
    for line in src:
        stripped = line.strip()
        if not stripped or stripped.startswith("--") or stripped.startswith("INSERT INTO"):
            continue
        if stripped.startswith("SET ") or stripped.startswith("SCRIPT "):
            continue
        if not stripped.startswith(allowed_prefixes):
            continue
        text = line.rstrip()
        for pattern, replacement in replacements:
            text = pattern.sub(replacement, text)
        out_lines.append(text)

with open(schema_path, "w", encoding="utf-8") as dst:
    dst.write("\n".join(out_lines))

print(f"MySQL-ready schema written to {schema_path}")
PY

if [[ ${WIPE_H2:-false} == "true" ]]; then
  RESPONSE="y"
else
  read -r -p "Remove existing H2 files under $H2_DB_PATH (y/N)? " RESPONSE
fi

case "$RESPONSE" in
  y|Y)
    for file in "$H2_DB_PATH".mv.db "$H2_DB_PATH".trace.db; do
      if [[ -f "$file" ]]; then
        rm -f "$file"
        echo "Removed $file"
      fi
    done
    ;;
  *)
    echo "Skipping H2 cleanup"
    ;;
esac
